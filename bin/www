#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('yangroulette:server')
var http = require('http')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)
var io = require('socket.io')(server)
let clients = 0
io.on('connection', function (socket) {
  console.log('connected to socket at:', socket.client.request.headers)
  socket.on('NewClient', function () {
    if (clients < 2) {
      if (clients === 1) {
        this.emit('CreatePeer')
      }
    } else {
      this.emit('SessionActive')
    }
    clients++
  })
  socket.on('offer', sendOffer)
  socket.on('answer', sendAnswer)
  socket.on('disconnect', disconnect)
})

function disconnect () {
  if (clients > 0) {
    clients--
  }
}

function sendOffer (offer) {
  this.broadcast.emit('BackOffer', offer)
}

function sendAnswer (data) {
  this.broadcast.emit('BackAnswer', data)
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
  console.log('Listening on ' + bind)
}
